import type { Request, Response } from "express";
import type { Subscription, SubscriptionDTO } from "@/model/Subscription.js";
import { randomUUID } from "crypto";

const subscriptions: Subscription[] = [
      { id: "1", name: 'Netflix', price: 9.99, userId: 'user1', currency: 'USD', billingCycle: 'monthly', nextBillingDate: new Date(), isActive: true, createdAt: new Date(), updatedAt: new Date() },
      { id: "2", name: 'Spotify', price: 19.99, userId: 'user2', currency: 'USD', billingCycle: 'monthly', nextBillingDate: new Date(), isActive: true, createdAt: new Date(), updatedAt: new Date() },
      { id: "3", name: 'Youtube family', price: 49.99 , userId: 'user3', currency: 'USD', billingCycle: 'yearly', nextBillingDate: new Date(), isActive: true, createdAt: new Date(), updatedAt: new Date() },
    ];

export const getSubscriptions = async (req: Request, res: Response) => {
  try {
    res.status(200).json(subscriptions);
  } catch (error) {
    console.error('Error fetching subscriptions:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

export const getSubscriptionsById = async (req: Request, res: Response) => {
  const { id } = req.params;
  console.log(`Fetching subscription with ID: ${id}`);

  try {
    // Simulate fetching a subscription by ID from a database
    const subscription: Subscription | undefined = subscriptions.find(sub => sub.id === id);

    if (!subscription) {
      res.status(404).json({ message: 'Subscription not found' });
      return;
    }

    res.status(200).json(subscription);
  } catch (error) {
    console.error('Error fetching subscription:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

export const createSubscription = async (req: Request, res: Response) => {
  const { name, price, userId, currency, billingCycle } = req.body;

  try {
    // Simulate creating a new subscription
    const newSubscription: Subscription = {
      id: randomUUID(), // In a real application, this would be generated by the database
      name,
      price,
      userId,
      currency,
      billingCycle,
      nextBillingDate: new Date(),
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    subscriptions.push(newSubscription);

    res.status(201).json(subscriptions);
  } catch (error) {
    console.error('Error creating subscription:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

export const updateSubscription = async (req: Request, res: Response) => {
  const { id } = req.params;
  const { name, price, currency, billingCycle }: SubscriptionDTO = req.body;


  try {
    // Simulate finding the subscription to update
    const subsciptionIndex = subscriptions.findIndex(sub => sub.id === id);

    if (subsciptionIndex === -1) {
      res.status(404).json({ message: 'Subscription not found' });
      return;
    }

    const subscriptionToUpdate = subscriptions[subsciptionIndex];
    if (!subscriptionToUpdate) {
      res.status(404).json({ message: 'Subscription not found' });
      return;
    }
    // Simulate updating a subscription
    const updatedSubscription: Subscription = {
      ...subscriptionToUpdate,
      name,
      price,
      currency,
      billingCycle,
      nextBillingDate: new Date(), // Update next billing date to current date
      updatedAt: new Date() // Update the updatedAt timestamp
    };

    // Replace the old subscription with the updated one
    subscriptions[subsciptionIndex] = updatedSubscription;

    res.status(200).json(updatedSubscription);
  } catch (error) {
    console.error('Error updating subscription:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}

export const deleteSubscription = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    // Simulate deleting a subscription
    const subsciptionIndex = subscriptions.findIndex(sub => sub.id === id);
    if (subsciptionIndex === -1) {
      res.status(404).json({ message: 'Subscription not found' });
      return;
    }
    // Remove the subscription from the array
    subscriptions.splice(subsciptionIndex, 1);
    console.log(`Deleting subscription with ID: ${id}`);
    
    res.status(204).send(); // No content to return after deletion
  } catch (error) {
    console.error('Error deleting subscription:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}